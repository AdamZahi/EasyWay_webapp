{% extends 'back-office/vehicules/bus/backbase.html.twig' %}

{% block title %}Liste des bus{% endblock %}

{% block content %}
<div class="content-wrapper p-3">
    <div class="container-fluid">
        <div class="container mt-4">
                <div class="row">
                    {% for bus in buses %}
                        <div class="col-md-4 mb-4">
                            <div class="card card-success h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h3 class="card-title mb-0">Bus {{ bus.vehicule.immatriculation }}</h3>
                                    <div class="card-tools">
                                        {% if bus.trajet %}
                                            <button type="button" class="action-btn stations-btn" 
                                                    data-depart="{{ bus.trajet.depart }}" 
                                                    data-arret="{{ bus.trajet.arret }}">
                                                <i class="bi bi-signpost-split"></i> Stations
                                            </button>
                                        {% endif %}
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="bus-details">
                                        <div class="detail-item"><i class="bi bi-car-front"></i> <span><strong>Capacité:</strong> {{ bus.vehicule.capacite }}</span></div>
                                        <div class="detail-item"><i class="bi bi-speedometer2"></i> <span><strong>État:</strong> {{ bus.vehicule.etat }}</span></div>
                                        {% if bus.conducteur is defined and bus.conducteur %}
                                            <div class="detail-item"><i class="bi bi-person-badge"></i> <span><strong>Conducteur:</strong> {{ bus.conducteur.nom }} {{ bus.conducteur.prenom }}</span></div>
                                        {% endif %}
                                        {% if bus.trajet %}
                                            <div class="detail-item"><i class="bi bi-signpost-split"></i> <span><strong>Trajet:</strong> {{ bus.trajet.depart }} → {{ bus.trajet.arret }}</span></div>
                                        {% endif %}
                                        <hr>
                                        <div class="detail-item"><i class="bi bi-door-open"></i> <span><strong>Portes:</strong> {{ bus.nombrePortes }}</span></div>
                                        <div class="detail-item"><i class="bi bi-bus-front"></i> <span><strong>Service:</strong> {{ bus.typeService }}</span></div>
                                        <div class="detail-item"><i class="bi bi-people"></i> <span><strong>Places:</strong> {{ bus.nombreDePlaces }}</span></div>
                                        <div class="detail-item"><i class="bi bi-building"></i> <span><strong>Compagnie:</strong> {{ bus.compagnie }}</span></div>
                                        <div class="detail-item"><i class="bi bi-snow"></i> <span><strong>Climatisation:</strong> {{ bus.climatisation ? 'Oui' : 'Non' }}</span></div>
                                    </div>
                                </div>
                                <div class="card-actions">
                                    <a href="/bus/edit/{{ bus.vehicule.id }}" class="action-btn edit-btn">
                                        <i class="bi bi-pencil-square"></i> Modifier
                                    </a>
                                    <form method="post" action="{{ path('delete_bus', {'id': bus.vehicule.id}) }}" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce bus?');">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ bus.vehicule.id) }}">
                                        <button type="submit" class="action-btn delete-btn">
                                            <i class="bi bi-trash"></i> Supprimer
                                        </button>
                                    </form>
                                    {% if bus.trajet %}
                                        <button type="button" class="action-btn route-btn" 
                                                data-depart="{{ bus.trajet.depart }}" 
                                                data-arret="{{ bus.trajet.arret }}">
                                            <i class="bi bi-map"></i> Trajet
                                        </button>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% else %}
                        <div class="col-12">
                            <div class="alert alert-warning text-center py-4">
                                <i class="bi bi-exclamation-triangle-fill fs-1"></i>
                                <h4 class="mt-3">Aucun bus trouvé</h4>
                                <p class="mb-0">Cliquez sur le bouton "Ajouter" pour commencer</p>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                <div class="text-center my-4">
                    <a href="{{ path('create_bus') }}" class="btn btn-success d-inline-flex align-items-center px-4 py-2">
                        <i class="bi bi-plus-circle me-2"></i> Ajouter un Bus
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal pour la carte -->
    <div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mapModalLabel">Visualisation du trajet</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    <div id="map" style="height: 70vh;"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}


{% block js %}
    {{ parent() }}
    <!-- Leaflet CSS & JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <!-- Leaflet Routing Machine -->
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Gestion des boutons de trajet
            document.querySelectorAll('.route-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const depart = this.dataset.depart;
                    const arret = this.dataset.arret;

                    const modal = new bootstrap.Modal(document.getElementById('mapModal'));
                    modal.show();

                    document.getElementById('mapModal').addEventListener('shown.bs.modal', function () {
                        initRouteMap(depart, arret, false);
                    }, { once: true });
                });
            });

            // Gestion des boutons de stations
            document.querySelectorAll('.stations-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const depart = this.dataset.depart;
                    const arret = this.dataset.arret;

                    const modal = new bootstrap.Modal(document.getElementById('mapModal'));
                    modal.show();

                    document.getElementById('mapModal').addEventListener('shown.bs.modal', function () {
                        initRouteMap(depart, arret, true);
                    }, { once: true });
                });
            });

            async function geocodeAddress(address) {
                try {
                    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&countrycodes=tn&limit=1`);
                    const data = await response.json();
                    if (data && data.length > 0) {
                        return {
                            lat: parseFloat(data[0].lat),
                            lng: parseFloat(data[0].lon),
                            displayName: data[0].display_name
                        };
                    }
                    return null;
                } catch (error) {
                    console.error("Erreur de géocodage:", error);
                    return null;
                }
            }

            async function initRouteMap(depart, arret, showStations) {
    const mapContainer = document.getElementById('map');
    if (mapContainer._leaflet_map) {
        mapContainer._leaflet_map.remove();
    }

    const map = L.map('map').setView([34, 9], 7);
    mapContainer._leaflet_map = map;

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    const loadingControl = L.control({ position: 'topright' });
    loadingControl.onAdd = function () {
        this._div = L.DomUtil.create('div', 'loading-control');
        this.update();
        return this._div;
    };
    loadingControl.update = function (text = 'Chargement...') {
        this._div.innerHTML = `<div class="alert alert-info p-2">${text}</div>`;
    };
    loadingControl.addTo(map);

    try {
        loadingControl.update("Recherche du point de départ...");
        const pointDepart = await geocodeAddress(depart);
        if (!pointDepart) throw new Error("Adresse de départ non trouvée");

        loadingControl.update("Recherche du point d'arrivée...");
        const pointArret = await geocodeAddress(arret);
        if (!pointArret) throw new Error("Adresse d'arrivée non trouvée");

        // Ajouter les marqueurs
        L.marker([pointDepart.lat, pointDepart.lng]).addTo(map).bindPopup("Départ").openPopup();
        L.marker([pointArret.lat, pointArret.lng]).addTo(map).bindPopup("Arrivée");

        // Appel à ORS
        const response = await fetch('https://api.openrouteservice.org/v2/directions/driving-car/geojson', {
            method: 'POST',
            headers: {
                'Accept': 'application/json, application/geo+json',
                'Authorization': '5b3ce3597851110001cf6248de955d6e618d4160978f3fa0cca6c6d5',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                coordinates: [
                    [pointDepart.lng, pointDepart.lat],
                    [pointArret.lng, pointArret.lat]
                ],
                alternative_routes: {
                    target_count: 3,
                    share_factor: 0.6,
                    weight_factor: 1.6
                }
            })
        });

        const geojson = await response.json();

        // Afficher les différents itinéraires
        geojson.features.forEach((feature, index) => {
            const route = L.geoJSON(feature.geometry, {
                style: {
                    color: ['#007bff', '#28a745', '#ffc107'][index % 3],
                    weight: 4,
                    opacity: 0.8
                }
            }).addTo(map);

            if (index === 0) {
                map.fitBounds(route.getBounds(), { padding: [50, 50] });
            }
        });

        map.removeControl(loadingControl);

        // Si showStations, tu peux garder ta logique actuelle ici
        if (showStations) {
            loadingControl.update("Recherche des stations...");
            const stations = await fetchBusStations(pointDepart, pointArret);
            stations.forEach(station => {
                L.marker([station.lat, station.lon], {
                    icon: L.divIcon({
                        className: 'station-icon',
                        html: '<div style="background-color: #28a745; border-radius: 50%; width: 16px; height: 16px;"></div>',
                        iconSize: [16, 16]
                    })
                }).addTo(map)
                    .bindPopup(`<b>${station.tags.name || 'Station'}</b>`);
            });
        }

    } catch (error) {
        loadingControl.update(`Erreur: ${error.message}`);
        console.error(error);
    }
}
async function fetchBusStationsNearRoute(routeGeometry) {
    const stations = [];

    const allCoords = routeGeometry.coordinates;

    // Découpe en morceaux pour éviter une requête trop large
    for (const coord of allCoords) {
        const [lng, lat] = coord;

        const url = `https://overpass-api.de/api/interpreter?data=[out:json];node(around:500,${lat},${lng})[highway=bus_stop];out;`;

        try {
            const response = await fetch(url);
            const data = await response.json();

            for (const element of data.elements) {
                if (!stations.find(s => s.id === element.id)) {
                    stations.push({
                        id: element.id,
                        lat: element.lat,
                        lon: element.lon,
                        tags: element.tags
                    });
                }
            }

            // Petit délai pour ne pas surcharger l'API Overpass
            await new Promise(r => setTimeout(r, 300));
        } catch (error) {
            console.error("Erreur Overpass:", error);
        }
    }

    return stations;
}



            async function fetchBusStations(pointDepart, pointArrivee) {
    try {
        // Calcul de la distance approximative
        const distance = Math.sqrt(
            Math.pow(pointArrivee.lat - pointDepart.lat, 2) +
            Math.pow(pointArrivee.lng - pointDepart.lng, 2)
        );

        // Marges pour la requête bbox (ex: 10% de la distance)
        const padding = distance * 0.1;

        const minLat = Math.min(pointDepart.lat, pointArrivee.lat) - padding;
        const maxLat = Math.max(pointDepart.lat, pointArrivee.lat) + padding;
        const minLon = Math.min(pointDepart.lng, pointArrivee.lng) - padding;
        const maxLon = Math.max(pointDepart.lng, pointArrivee.lng) + padding;

        // Requête Overpass pour récupérer uniquement les stations bus
        const query = `
            [out:json][timeout:25];
            (
                node["highway"="bus_stop"](${minLat},${minLon},${maxLat},${maxLon});
                node["public_transport"="platform"]["bus"="yes"](${minLat},${minLon},${maxLat},${maxLon});
            );
            out body;
        `;

        const url = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(query)}`;
        const response = await fetch(url);
        const data = await response.json();

        if (!data.elements || data.elements.length === 0) return [];

        // Seuil de proximité (rayon) de la ligne : 300 mètres (~0.003 degrés)
        const threshold = 0.003;

        // On garde uniquement les points à côté de la ligne droite
        return data.elements.filter(element => {
            if (element.type !== 'node') return false;
            return isPointNearLine(
                { lat: element.lat, lng: element.lon },
                pointDepart,
                pointArrivee,
                threshold
            );
        });

    } catch (error) {
        console.error("Erreur lors de la récupération des stations:", error);
        return [];
    }
}


            function isPointNearLine(point, lineStart, lineEnd, threshold) {
                const A = { x: lineStart.lng, y: lineStart.lat };
                const B = { x: lineEnd.lng, y: lineEnd.lat };
                const P = { x: point.lng, y: point.lat };

                const AB = { x: B.x - A.x, y: B.y - A.y };
                const AP = { x: P.x - A.x, y: P.y - A.y };
                const ab2 = AB.x * AB.x + AB.y * AB.y;
                const ap_ab = AP.x * AB.x + AP.y * AB.y;
                const t = Math.max(0, Math.min(1, ap_ab / ab2));

                const closest = { x: A.x + AB.x * t, y: A.y + AB.y * t };
                const dx = P.x - closest.x;
                const dy = P.y - closest.y;
                const dist = Math.sqrt(dx * dx + dy * dy);

                return dist <= threshold;
            }

            function distance(point1, point2) {
                const R = 6371;
                const dLat = toRad(point2.lat - point1.lat);
                const dLon = toRad(point2.lng - point1.lng);
                const a =
                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(point1.lat)) * Math.cos(toRad(point2.lat)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            function toRad(degrees) {
                return degrees * Math.PI / 180;
            }
        });
    </script>



    <style>
    #map {
            height: 70vh;
            width: 100%;
            border-radius: 8px;
        }
        .leaflet-routing-container {
            display: none; /* Masquer le panneau d'instructions */
        }
        .loading-control {
            margin: 10px;
            pointer-events: none;
        }
        .loading-control .alert {
            margin-bottom: 0;
        }
        /* Style pour les icônes */
        .depart-icon, .arrivee-icon {
            background: transparent;
            border: none;
        }
        
        /* Style pour la carte */
        #map {
            width: 100%;
            border-radius: 8px;
        }
        
        /* Style pour les boutons d'action */
        .card-actions {
            display: flex;
            gap: 8px;
            justify-content: flex-end;
            padding: 12px;
            background: rgba(0,0,0,0.03);
            border-top: 1px solid rgba(0,0,0,0.125);
        }
        
        .action-btn {
            border-radius: 20px;
            padding: 6px 12px;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s ease;
        }
        
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .edit-btn {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            border: none;
            color: white;
        }
        
        .delete-btn {
            background: linear-gradient(135deg, #e74a3b 0%, #be2617 100%);
            border: none;
            color: white;
        }
        
        .route-btn {
            background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
            border: none;
            color: white;
        }
        
        /* Style pour les détails du bus */
        .detail-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            gap: 8px;
        }
        
        .detail-item i {
            width: 20px;
            text-align: center;
        }
        .stations-btn {
            background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
            border: none;
            color: #212529;
        }
        
        .station-icon {
            background: transparent;
            border: none;
        }
        
        .loading-control .alert {
            margin-bottom: 0;
            font-size: 14px;
            padding: 8px 12px;
        }
        
        /* Style pour les popups des stations */
        .leaflet-popup-content b {
            color: #28a745;
        }
    </style>
{% endblock %}