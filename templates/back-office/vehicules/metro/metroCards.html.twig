{% extends 'back-office/reclamation/backbase.html.twig' %}
{% block title %}Liste des métros{% endblock %}

{% block content %}
<div class="content-wrapper p-3">
    <div class="container-fluid">
        <div class="row">
            {% for metro in pagination %}
            <div class="col-md-4 mb-4">
                <div class="card card-info h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 class="card-title mb-0">Métro {{ metro.id.immatriculation ?? 'N/A' }}</h3>
                        <div class="card-tools">
                            {% if metro.trajet %}
                            <button type="button" class="action-btn stations-btn" 
                                    data-depart="{{ metro.trajet.depart }}" 
                                    data-arret="{{ metro.trajet.arret }}">
                                <i class="bi bi-signpost-split"></i> Stations
                            </button>
                            {% endif %}
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="metro-details">
                            <div class="detail-item">
                                <i class="bi bi-diagram-3"></i>
                                <span><strong>Longueur du réseau:</strong> {{ metro.longueurReseau }} km</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-list-ol"></i>
                                <span><strong>Nombre de lignes:</strong> {{ metro.nombreLignes }}</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-train-front"></i>
                                <span><strong>Nombre de rames:</strong> {{ metro.nombreRames }}</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-person-workspace"></i>
                                <span><strong>Propriétaire:</strong> {{ metro.proprietaire }}</span>
                            </div>
                            <hr>
                            {% if metro.id %}
                            <div class="detail-item">
                                <i class="bi bi-truck-front"></i>
                                <span><strong>Type:</strong> {{ metro.id.typeVehicule }}</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-tools"></i>
                                <span><strong>État:</strong> {{ metro.id.etat }}</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-people-fill"></i>
                                <span><strong>Capacité:</strong> {{ metro.id.capacite }}</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-card-text"></i>
                                <span><strong>Immatriculation:</strong> {{ metro.id.immatriculation }}</span>
                            </div>
                            {% endif %}
                            
                            {% if metro.trajet %}
                            <hr>
                            <div class="detail-item">
                                <i class="bi bi-geo-alt-fill"></i>
                                <span data-depart><strong>Départ:</strong> {{ metro.trajet.depart }}</span>
                            </div>
                            <div class="detail-item">
                                <i class="bi bi-flag-fill"></i>
                                <span data-arret><strong>Arrêt:</strong> {{ metro.trajet.arret }}</span>
                            </div>
                            {% endif %}
                        </div>
                    </div>
                    <div class="card-actions">
                        <a href="{{ path('edit_metro', {'id': metro.id.id}) }}" class="action-btn edit-btn">
                            <i class="bi bi-pencil-square"></i> Modifier
                        </a>
                        <form method="post" action="{{ path('delete_metro', {'id': metro.id.id}) }}" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce métro?');">
                            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ metro.id.id) }}">
                            <button type="submit" class="action-btn delete-btn">
                                <i class="bi bi-trash"></i> Supprimer
                            </button>
                        </form>
                        {% if metro.trajet %}
                        <button type="button" class="action-btn route-btn" 
                                data-depart="{{ metro.trajet.depart }}" 
                                data-arret="{{ metro.trajet.arret }}">
                            <i class="bi bi-map"></i> Trajet
                        </button>
                        {% endif %}
                    </div>
                </div>
            </div>
            {% else %}
            <div class="col-12">
                <div class="alert alert-warning text-center py-4">
                    <i class="bi bi-exclamation-triangle-fill fs-1"></i>
                    <h4 class="mt-3">Aucun métro trouvé</h4>
                    <p class="mb-0">Cliquez sur le bouton "Ajouter" pour commencer</p>
                </div>
            </div>
            {% endfor %}
        </div>
        <div class="text-center my-4">
            <a href="{{ path('create_metro') }}" class="btn btn-success d-inline-flex align-items-center px-4 py-2">
                <i class="bi bi-plus-circle me-2"></i> Ajouter un métro
            </a>
        </div>
        <div class="d-flex justify-content-center mt-5 mb-5">
             {{ knp_pagination_render(pagination, 'back-office/vehicules/bus/custom_pagination.html.twig') }}
            </div>
    </div>
</div>

<!-- Modal pour la carte -->
<div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mapModalLabel">Visualisation du trajet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div id="map" style="height: 70vh;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block js %}
{{ parent() }}
<!-- Leaflet CSS & JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<!-- Leaflet Routing Machine -->
<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    let map;
    let tileLayer;
    let routeControl;

    // Fonction pour géocoder une adresse
    async function geocodeAddress(address) {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&countrycodes=tn&limit=1`);
            const data = await response.json();
            if (data && data.length > 0) {
                return {
                    lat: parseFloat(data[0].lat),
                    lng: parseFloat(data[0].lon),
                    displayName: data[0].display_name
                };
            }
            return null;
        } catch (error) {
            console.error("Erreur de géocodage:", error);
            return null;
        }
    }

    // Fonction pour récupérer les stations entre deux points
    async function fetchStationsBetween(startLatLng, endLatLng) {
        const bbox = [
            Math.min(startLatLng.lat, endLatLng.lat),
            Math.min(startLatLng.lng, endLatLng.lng),
            Math.max(startLatLng.lat, endLatLng.lat),
            Math.max(startLatLng.lng, endLatLng.lng)
        ].join(',');

        const query = `
            [out:json][timeout:25];
            (
                node["railway"="station"](${bbox});
                node["railway"="subway_entrance"](${bbox});
            );
            out body;
        `;

        try {
            const response = await fetch('https://overpass-api.de/api/interpreter', {
                method: 'POST',
                body: `data=${encodeURIComponent(query)}`,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            });
            const data = await response.json();
            return data.elements || [];
        } catch (error) {
            console.error("Erreur lors de la récupération des stations:", error);
            return [];
        }
    }

    // Fonction pour récupérer les données de la ligne de métro
    async function getMetroLineData(startLatLng, endLatLng) {
    const bbox = [
        Math.min(startLatLng.lat, endLatLng.lat) - 0.02,
        Math.min(startLatLng.lng, endLatLng.lng) - 0.02,
        Math.max(startLatLng.lat, endLatLng.lat) + 0.02,
        Math.max(startLatLng.lng, endLatLng.lng) + 0.02
    ].join(',');

    const query = `
        [out:json][timeout:25];
        (
            way["railway"="light_rail"](${bbox});
            way["railway"="subway"](${bbox});
        );
        (._;>;);
        out geom;
    `;

    try {
        const response = await fetch('https://overpass-api.de/api/interpreter', {
            method: 'POST',
            body: query,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        });
        const data = await response.json();

        if (!data.elements || data.elements.length === 0) {
            return null;
        }

        // Construire un dictionnaire des noeuds
        const nodes = {};
        data.elements.forEach(el => {
            if (el.type === 'node') {
                nodes[el.id] = [el.lat, el.lon];
            }
        });

        // Trouver les bonnes lignes
        const lines = [];
        data.elements.forEach(el => {
            if (el.type === 'way' && el.geometry) {
                const coords = el.geometry.map(p => [p.lat, p.lon]);

                // Vérifier si cette ligne est proche du départ ET de l'arrivée
                const isNearStart = coords.some(coord => distance(coord, [startLatLng.lat, startLatLng.lng]) < 0.5);
                const isNearEnd = coords.some(coord => distance(coord, [endLatLng.lat, endLatLng.lng]) < 0.5);

                if (isNearStart && isNearEnd) {
                    lines.push(coords);
                }
            }
        });

        if (lines.length === 0) {
            return null;
        }

        return { coordinates: lines.flat() };

    } catch (error) {
        console.error("Erreur lors de la récupération de la ligne de métro:", error);
        return null;
    }
}

// Fonction pour calculer la distance en km entre deux points lat/lng
function distance(coord1, coord2) {
    const R = 6371; // rayon de la Terre en km
    const dLat = (coord2[0] - coord1[0]) * Math.PI / 180;
    const dLon = (coord2[1] - coord1[1]) * Math.PI / 180;
    const lat1 = coord1[0] * Math.PI / 180;
    const lat2 = coord2[0] * Math.PI / 180;

    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return R * c;
}


    // Fonction principale pour initialiser la carte
    async function initRouteMap(departAddress, arretAddress, showStations) {
        // Initialiser la carte si elle n'existe pas
        if (!map) {
            map = L.map('map').setView([36.81897, 10.16579], 13);
            tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap'
            }).addTo(map);
        } else {
            // Nettoyer la carte existante
            map.eachLayer(layer => {
                if (layer !== tileLayer) {
                    map.removeLayer(layer);
                }
            });
            if (routeControl) {
                map.removeControl(routeControl);
            }
        }

        // Ajouter un contrôle de chargement
        const loadingControl = L.control({ position: 'topright' });
        loadingControl.onAdd = function() {
            this._div = L.DomUtil.create('div', 'loading-control');
            this.update('Chargement...');
            return this._div;
        };
        loadingControl.update = function(text) {
            this._div.innerHTML = `<div class="alert alert-info">${text}</div>`;
        };
        loadingControl.addTo(map);

        try {
            loadingControl.update('Recherche des stations...');
            const departData = await geocodeAddress(departAddress);
            const arretData = await geocodeAddress(arretAddress);

            if (!departData || !arretData) {
                throw new Error('Impossible de localiser les stations.');
            }

            const departLatLng = { lat: departData.lat, lng: departData.lng };
            const arretLatLng = { lat: arretData.lat, lng: arretData.lng };

            L.marker([departLatLng.lat, departLatLng.lng], {
                icon: L.divIcon({
                    className: 'metro-marker',
                    html: '<i class="bi bi-geo-alt-fill" style="color: #FF0000; font-size: 24px;"></i>',
                    iconSize: [24, 24]
                })
            }).addTo(map).bindPopup(`<b>Départ:</b> ${departData.displayName}`);

            L.marker([arretLatLng.lat, arretLatLng.lng], {
                icon: L.divIcon({
                    className: 'metro-marker',
                    html: '<i class="bi bi-flag-fill" style="color: #FF0000; font-size: 24px;"></i>',
                    iconSize: [24, 24]
                })
            }).addTo(map).bindPopup(`<b>Arrêt:</b> ${arretData.displayName}`);

            if (showStations) {
                loadingControl.update('Recherche des stations intermédiaires...');
                const stations = await fetchStationsBetween(departLatLng, arretLatLng);

                if (stations.length > 0) {
                    stations.forEach(station => {
                        if (station.lat && station.lon) {
                            L.marker([station.lat, station.lon], {
                                icon: L.divIcon({
                                    className: 'station-marker',
                                    html: '<i class="bi bi-dot" style="color: #0000FF; font-size: 24px;"></i>',
                                    iconSize: [24, 24]
                                })
                            }).addTo(map).bindPopup(`<b>Station:</b> ${station.tags?.name || 'Inconnue'}`);
                        }
                    });
                    loadingControl.update(`${stations.length} stations trouvées`);
                } else {
                    loadingControl.update('Aucune station trouvée');
                }
            } else {
                loadingControl.update('Recherche de la ligne de métro...');
                const metroLine = await getMetroLineData(departLatLng, arretLatLng);

                if (metroLine && metroLine.coordinates.length > 0) {
                    L.polyline(metroLine.coordinates, {
                        color: '#FF0000',
                        weight: 5,
                        opacity: 0.7
                    }).addTo(map).bindPopup('<b>Ligne de métro</b>');
                    loadingControl.update('Ligne de métro affichée');
                } else {
                    L.polyline([
                        [departLatLng.lat, departLatLng.lng],
                        [arretLatLng.lat, arretLatLng.lng]
                    ], {
                        color: '#FF0000',
                        weight: 3,
                        opacity: 0.7,
                        dashArray: '10, 10'
                    }).addTo(map);
                    loadingControl.update('Trajet direct affiché (ligne non trouvée)');
                }
            }

            map.fitBounds([
                [departLatLng.lat, departLatLng.lng],
                [arretLatLng.lat, arretLatLng.lng]
            ], { padding: [50, 50] });

        } catch (error) {
            console.error(error);
            loadingControl.update(`Erreur: ${error.message}`);
        }
    }

    // Gestion des clics sur les boutons
    document.querySelectorAll('.route-btn, .stations-btn').forEach(button => {
        button.addEventListener('click', function() {
            const depart = this.getAttribute('data-depart');
            const arret = this.getAttribute('data-arret');
            const showStations = this.classList.contains('stations-btn');

            const modal = new bootstrap.Modal(document.getElementById('mapModal'));
            modal.show();

            document.getElementById('mapModal').addEventListener('shown.bs.modal', function() {
                initRouteMap(depart, arret, showStations);
            }, { once: true });
        });
    });
});
</script>


<style>
    .metro-marker {
        background: transparent;
        border: none;
    }
    
    .station-marker {
        background: transparent;
        border: none;
    }
    
    #map {
        height: 70vh;
        width: 100%;
        border-radius: 8px;
    }
    
    .leaflet-routing-container {
        background: white;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
    }
    
    .loading-control {
        margin: 10px;
        pointer-events: none;
    }
    
    .loading-control .alert {
        margin-bottom: 0;
        padding: 5px 10px;
        font-size: 14px;
    }
    
    .card-actions {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
        padding: 12px;
        background: rgba(0,0,0,0.03);
        border-top: 1px solid rgba(0,0,0,0.125);
    }
    
    .action-btn {
        border-radius: 20px;
        padding: 6px 12px;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 5px;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .edit-btn {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        color: white;
    }
    
    .delete-btn {
        background: linear-gradient(135deg, #e74a3b 0%, #be2617 100%);
        color: white;
    }
    
    .route-btn {
        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
        color: white;
    }
    
    .stations-btn {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        color: white;
    }
    
    .detail-item {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        gap: 8px;
    }
    
    .detail-item i {
        width: 20px;
        text-align: center;
    }
    
    .leaflet-popup-content b {
        color: #dc3545;
    }
</style>
{% endblock %}